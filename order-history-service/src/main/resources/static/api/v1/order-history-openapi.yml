openapi: "3.0.2"
info:
  title: Order History Service
  description: A service to retrieve the order's Info
  version: 1.0.0
  contact:
    name: API SUPPORT
    email: apisupport@example.com
  license:
    name: MIT License
    url: https://mit-license.org/

servers:
- url: http://{basepath}:{port}/order-history-service/api/v1
  description: Internal Microservices Api Server
  variables:
    basepath:
      default: localhost
    port:
      enum:
        - '7040'
        - '7041'
        - '7042'
      default: '7040'
- url: http://{basepath}:{port}/{prefix}/order-history/api/v1
  description: Gateway Api Server
  variables:
    basepath:
      default: localhost
    port:
      enum:
        - '9000'
      default: '9000'
    prefix:
      enum:
        - public
        - private
      default: private




components:
  parameters:
    query_limit:
      name: limit
      in: query
      required: false
      description: The  size of items to return
      schema:
        $ref: '#/components/schemas/limitPerPage'
    query_page:
      name: page
      in: query
      required: false
      description: Number of the page to return
      schema:
        $ref: '#/components/schemas/page'
    query_filter:
      name: filter
      in: query
      required: false
      description: Filter items by text
      schema:
        $ref: '#/components/schemas/safetextName'
    query_status:
      name: status
      in: query
      required: false
      description: Filter items by status
      schema:
        $ref: '#/components/schemas/OrderStatus'
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    GenericError:
      description: Generic Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    floatPrice:
      description: price in float
      type: number
      format: float
      minimum: 0
      maximum: 10000
    int16Unsigned:
      type: integer
      format: int16
      minimum: 0
      maximum: 32767
    page:
       type: integer
       format: int16
       minimum: 1
       maximum: 32767
       default: 1  
    limitPerPage:
      description: the limit of the items to return
      type: integer
      format: int16
      minimum: 1
      maximum: 50
      default: 25
    int64Unsigned:
      type: integer
      format: int64
      minimum: 0
      maximum: 9223372036854775807
    id_int64Unsigned:
      type: integer
      format: int64
      minimum: 0
      maximum: 9223372036854775807
      readOnly: true
    timestamp:
      type: string
      format: date-time
      example: "2021-01-30T08:30:00Z"
    safetextName:
      description: Safe text for Name
      type: string
      pattern: '^[a-zA-Z0-9 .-]+$'
      minLength: 3
      maxLength: 50
    safetextMessages:
      description: Safe text for Description
      type: string
      pattern: '^[a-zA-Z0-9 .-]+$'
      minLength: 3
      maxLength: 100
    Error:
      type: object
      additionalProperties: false
      description: Error Details
      properties:
        errorCode:
          type: string
          pattern: '^[a-zA-Z0-9]{4}$'
          minLength: 4
          maxLength: 4
        errors:
          type: array
          items:
              $ref: '#/components/schemas/safetextMessages'
        datetime:
          $ref: '#/components/schemas/timestamp'
      required:
        - errorCode
        - errors
        - datetime
      example:
        code: WS01
        errors: 
            - Generic Error
        datetime: "2021-01-30T08:30:00Z"
    OrderStatus:
      type: string
      description: Type of a book
      enum:
        - PENDING
        - WAITING_USER_ADDRESS
        - WAIT_PAYMENT
        - WAIT_SHIPPING
        - WAIT_DELIVERY
        - DELIVERED
        - ERROR
      example: PENDING     
    OrderItem:
      type: object
      additionalProperties: false
      description: Order's Item
      properties:
        id:
          $ref: '#/components/schemas/id_int64Unsigned'
        name:
          $ref: '#/components/schemas/safetextName'
        quantity:
            $ref: '#/components/schemas/int16Unsigned'
        price:
          $ref: '#/components/schemas/floatPrice'
    DeliveryAddress:
      type: object
      additionalProperties: false
      description: Delivery Address
      properties:
        city:
          $ref: '#/components/schemas/safetextName'
        country:
          $ref: '#/components/schemas/safetextName'
        cap:
          $ref: '#/components/schemas/safetextName'
        street:
          $ref: '#/components/schemas/safetextMessages'
    Order:
      type: object
      additionalProperties: false
      description: Order's Object
      properties:
        idOrder:
          $ref: '#/components/schemas/id_int64Unsigned'
        status:
          $ref: '#/components/schemas/OrderStatus'
        idUser:
          $ref: '#/components/schemas/safetextName'
        creationDate:
          $ref: '#/components/schemas/timestamp'
        lastUpdate:
          $ref: '#/components/schemas/timestamp'
        paymentDate:
          $ref: '#/components/schemas/timestamp'
        shippingDate:
          $ref: '#/components/schemas/timestamp'
        deliveryDate:
          $ref: '#/components/schemas/timestamp'
        totalPrice: 
          $ref: '#/components/schemas/floatPrice'
        totalWeight: 
          $ref: '#/components/schemas/int16Unsigned'
        description:
          $ref: '#/components/schemas/safetextMessages'
        elements:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddress'

      required:
        - idOrder
        - status
        - idUser
        - creationDate
        - lastUpdate
        - description
      example:
        idOrder: 1
        status: WAITING_PAYMENT
        idUser: test
        creationDate: "2021-01-30T08:30:00Z"
        lastUpdate: "2021-01-30T08:30:00Z"
        paymentDate: 
        shippingDate:
        deliveryDate:
        totalPrice: 290.00
        description: "In attesa del pagamento"
        elements: 
          - id: 1
            name: "PS4"
            price: 250.00
            quantity: 1
          - id: 2
            name: "PAD_PS4"
            price: 40.00
            quantity: 1
        deliveryAddress:
          city: Napoli
          country: Italy
          cap: 80100
          street: via delle vie
    Orders:
      type: object
      additionalProperties: false
      description: List of orders
      properties:
        hasNextPage:
            type: boolean
        totalItems:
          $ref: '#/components/schemas/int64Unsigned'
        itemsLimitPerPage:
          $ref: '#/components/schemas/limitPerPage'
        itemsInCurrentPage:
          $ref: '#/components/schemas/limitPerPage'
        totalPage:
          $ref: '#/components/schemas/int16Unsigned'
        currentPage:
          $ref: '#/components/schemas/int16Unsigned'
        nextPage:
          $ref: '#/components/schemas/int16Unsigned'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Order'          
          
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

security: 
  - BearerAuth: []

paths:
  /orders:
    get:
      summary: List all orders
      operationId: listOrders
      tags:
        - Orders
      parameters:
        - $ref: '#/components/parameters/query_limit'
        - $ref: '#/components/parameters/query_page'
        - $ref: '#/components/parameters/query_filter'
        - $ref: '#/components/parameters/query_status'
      responses:
        200:
          description: "A list of Orders"
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Orders"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/GenericError'
  /orders/{orderId}:
    get:
      summary: Specified Order details
      operationId: showOrderById
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          description: the identify of the Order to retrieve
          schema:
            $ref: '#/components/schemas/id_int64Unsigned'
      responses:
        200:
          description: Response if valid identify
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/GenericError'


